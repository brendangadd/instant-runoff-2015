{"version":3,"sources":["instant-runoff.js"],"names":["_classCallCheck","instance","Constructor","TypeError","logDistribution","votes","rank","distribution","BLANK","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","undefined","_step6","_iterator6","Object","keys","NEXT_RANK_DISTRIBUTION","Symbol","iterator","next","done","party","value","err","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","vote","ranking","total","reduce","memo","key","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","console","log","generateVotes","numVotes","nextRankDistribution","i","push","Vote","generateRanks","didAddRank","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","isClosed","numRanks","length","lastRank","rnd","Math","random","acc","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","item","probability","hasRankFor","addRankFor","close","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","protoProps","staticProps","prototype","this","indexOf","Error","InstantRunoffElection","assignment","exhaustedVotes","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","assignee","hasOwnProperty","maxAssignee","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","name","minAssignee","Number","MAX_SAFE_INTEGER","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","leader","hasWinner","trailer","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","isReassigned","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5"],"mappings":"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","file":"instant-runoff.js","sourcesContent":["'use strict';\n\n/**\n * A single vote (akin to a ballot) which holds a ranking of parties (which are just strings).\n *\n * Since votes are generated by ranking one party at a time, each vote has an open/closed state. The\n * closed state indicates that the vote can receive no more ranks. This allows a set of votes to be\n * generated over a number of iterations while allowing a vote to be completed part way through\n * (indicating that the voter does not wish to rank any more parties).\n */\nclass Vote {\n\n   constructor() {\n      this.ranking = [];\n      this.isClosed = false;\n   }\n\n   hasRankFor(party) {\n      return this.ranking.indexOf(party) >= 0;\n   }\n\n   addRankFor(party) {\n      if (this.hasRankFor(party)) {\n         throw new Error('Vote already has a rank for ' + party + '.');\n      }\n      if (this.isClosed) {\n         throw new Error('Ranks cannot be added to a closed vote.');\n      }\n      this.ranking.push(party);\n      return this;\n   }\n\n   close() {\n      this.isClosed = true;\n      return this;\n   }\n\n}\n\nclass InstantRunoffElection {\n\n   constructor(votes) {\n      this.votes = votes;\n      this.assignment = {};\n      this.exhaustedVotes = [];\n      for (let vote of votes) {\n         if (vote.ranking.length === 0) {\n            this.exhaustedVotes.push(vote);\n         } else {\n            let assignee = vote.ranking[0];\n            if (!this.assignment.hasOwnProperty(assignee)) {\n               this.assignment[assignee] = [];\n            }\n            this.assignment[assignee].push(vote);\n         }\n      }\n   }\n\n   leader() {\n      let maxAssignee = {numVotes: 0};\n\n      for (let assignee of Object.keys(this.assignment)) {\n         let numVotes = this.assignment[assignee].length;\n         if (numVotes > maxAssignee.numVotes) {\n            maxAssignee = {name: assignee, numVotes};\n         }\n      }\n\n      return maxAssignee.name;\n   }\n\n   trailer () {\n      let minAssignee = {numVotes: Number.MAX_SAFE_INTEGER};\n\n      for (let assignee of Object.keys(this.assignment)) {\n         let numVotes = this.assignment[assignee].length;\n         if (numVotes < minAssignee.numVotes) {\n            minAssignee = {name: assignee, numVotes};\n         }\n      }\n\n      return minAssignee.name;\n   }\n\n   hasWinner() {\n      return this.assignment[this.leader()].length > this.votes.length / 2\n         || this.assignment.length <= 2\n      ;\n   }\n\n   advanceRound() {\n      if (this.hasWinner()) {\n         return;\n      }\n\n      let trailer = this.trailer();\n      let votes = this.assignment[trailer];\n      delete this.assignment[trailer];\n\n      for (let vote of votes) {\n         let isReassigned = false;\n         for (let rank of vote.ranking) {\n            if (this.assignment.hasOwnProperty(rank)) {\n               this.assignment[rank].push(vote);\n               isReassigned = true;\n               break;\n            }\n         }\n         if (!isReassigned) {\n            this.exhaustedVotes.push(vote);\n         }\n      }\n   }\n\n}\n\n/**\n * Logs the distribution of the parties chosen at the specified\n * rank among the supplied array of votes.\n */\nfunction logDistribution(votes, rank) {\n   var distribution = {'BLANK': 0};\n   for (let party of Object.keys(NEXT_RANK_DISTRIBUTION)) {\n      distribution[party] = 0;\n   }\n   for (let vote of votes) {\n      let party = vote.ranking[rank] || 'BLANK';\n      distribution[party]++;\n   }\n   let total = Object.keys(distribution)\n      .reduce((memo, key) => memo + distribution[key], 0)\n   ;\n   for (let key of Object.keys(distribution)) {\n      distribution[key] /= total;\n   }\n   console.log(distribution);\n}\n\n/**\n * Generates `numVotes` votes with ranks distributed according\n * to the supplied `nextRankDistribution`.\n */\nfunction generateVotes(numVotes, nextRankDistribution) {\n   let votes = [];\n   for (let i = 0; i < numVotes; i++) {\n      votes.push(new Vote);\n   }\n\n   while(generateRanks(votes, nextRankDistribution));\n\n   return votes;\n}\n\n/**\n * For each of the supplied votes, generates the next rank as per the\n * supplied `nextRankDistribution`. Closes the vote instead if a new\n * rank is not added.\n */\nfunction generateRanks(votes, nextRankDistribution) {\n   let didAddRank = false;\n\n   for (let vote of votes) {\n      if (vote.isClosed) {\n         continue;\n      }\n\n      let numRanks = vote.ranking.length;\n      let lastRank = numRanks > 0 ? vote.ranking[numRanks - 1] : 'BLANK';\n      let distribution = nextRankDistribution[lastRank];\n\n      let rnd = Math.random();\n      let acc = 0;\n      for (let item of distribution) {\n         acc += item.probability;\n         if (rnd < acc) {\n            if (!vote.hasRankFor(item.party)) {\n               vote.addRankFor(item.party);\n               didAddRank = true;\n            }\n            break;\n         }\n      }\n\n      if (vote.ranking.length === numRanks) {\n         // No next rank was given. Close the vote.\n         vote.close();\n      }\n   }\n\n   return didAddRank;\n}\n"],"sourceRoot":"/source/"}